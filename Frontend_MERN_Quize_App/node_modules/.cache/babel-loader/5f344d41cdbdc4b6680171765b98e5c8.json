{"ast":null,"code":"// import * as types from \"./actiontype.js\";  \n// import axios from \"axios\";  \n// import { API_BASE_URL } from \"./config.js\";  \n// // Create quiz in redux store  \n// export const quizRequest = () => {  \n//   return {  \n//     type: types.CREATE_QUIZ_REQUEST,  \n//   };  \n// };  \n// export const quizSuccess = (quiz) => {  \n//   return {  \n//     type: types.CREATE_QUIZ_SUCCESS,  \n//     payload: quiz,  \n//   };  \n// };  \n// export const quizFailure = (error) => {  \n//   return {  \n//     type: types.CREATE_QUIZ_FAILURE,  \n//     payload: error,  \n//   };  \n// };  \n// const getCurrentQuizRequest = (payload) => {  \n//   return {  \n//     type: types.GET_CURRENT_QUIZ_REQUEST,  \n//     payload,  \n//   };  \n// };  \n// const getCurrentQuizSuccess = (payload) => {  \n//   return {  \n//     type: types.GET_CURRENT_QUIZ_SUCCESS,  \n//     payload,  \n//   };  \n// };  \n// const getCurrentQuizFailure = (payload) => {  \n//   return {  \n//     type: types.GET_CURRENT_QUIZ_FAILURE,  \n//     payload,  \n//   };  \n// };  \n// const getCountSuccess = (payload) => {  \n//   return {  \n//     type: types.GETCOUNTDATA,  \n//     payload,  \n//   };  \n// };  \n// //---------- login user ----------  \n// export const loginUserName = (payload) => {  \n//   return {  \n//     type: types.GETUSERNAME,  \n//     payload,  \n//   };  \n// };  \n// export const loginUser = (payload) => {  \n//   return {  \n//     type: types.GETUSERID,  \n//     payload,  \n//   };  \n// };  \n// export const Logouthandleraction = (payload) => {  \n//   return {  \n//     type: types.LOGOUTUSER,  \n//     payload,  \n//   };  \n// };  \n// export const loginAdminId = (payload) => {  \n//   return {  \n//     type: types.GETADMINID,  \n//     payload,  \n//   };  \n// };  \n// export const loginAdminName = (payload) => {  \n//   return {  \n//     type: types.GETADMINNAME,  \n//     payload,  \n//   };  \n// };  \n// // ----------------------- action creator function for details of user for admin page ---------------  \n// const getAllUserDataRequest = (payload) => {  \n//   return {  \n//     type: types.GET_ALL_USER_DATA_REQUEST,  \n//     payload,  \n//   };  \n// };  \n// const getAllUserDataSuccess = (payload) => {  \n//   return {  \n//     type: types.GET_ALL_USER_DATA_SUCCESS,  \n//     payload,  \n//   };  \n// };  \n// const getAllUserDataFailure = (payload) => {  \n//   return {  \n//     type: types.GET_ALL_USER_DATA_FAILURE,  \n//     payload,  \n//   };  \n// };  \n// // ----------------------- details of user for admin page and delete user by admin ---------------  \n// export const getAllUserDataFromBackend = () => async (dispatch) => {  \n//   dispatch(getAllUserDataRequest());  \n//   try {  \n//     const res = await axios.get(\"http://localhost:4000/getuser\");  \n//     dispatch(getAllUserDataSuccess(res.data));  \n//   } catch (err) {  \n//     dispatch(getAllUserDataFailure());  \n//   }  \n// };  \n// export const deleteUserByAdmin = (userId) => async (dispatch) => {  \n//   try {  \n//     await axios.delete(`http://localhost:4000/user/${userId}`);  \n//     dispatch(getAllUserDataFromBackend());  \n//   } catch (error) {  \n//     console.error(\"Error deleting user:\", error.message);  \n//   }  \n// };  \n// // ----------post quiz--------------  \n// export const postQuizObj = (obj) => (dispatch) => {\n//   axios\n//     .post(\"http://localhost:4000/admin\", obj)\n//     .then((res) => {\n//       // Handle success if needed\n//     })\n//     .catch((err) => {\n//       console.error(\"Error posting quiz:\", err);\n//     });\n// };\n// // ----------------------------- fetching quiz data subject wise -------------  \n// const fetchQuizRequest = (payload) => {  \n//   return {  \n//     type: types.FETCH_QUIZ_REQUEST,  \n//     payload,  \n//   };  \n// };  \n// const fetchQuizSuccess = (payload) => {  \n//   return {  \n//     type: types.FETCH_QUIZ_SUCCESS,  \n//     payload,  \n//   };  \n// };  \n// const fetchQuizFailure = (payload) => {  \n//   return {  \n//     type: types.FETCH_QUIZ_FAILURE,  \n//     payload,  \n//   };  \n// };  \n// export const fetchQuizDataFrombackend = () => (dispatch) => {  \n//   axios  \n//     .get(\"http://localhost:4000/api/quiz\")  \n//     .then((res) => dispatch(fetchQuizSuccess(res.data)))  \n//     .catch((err) => console.log(err));  \n// };  \n// export const getQuiz = (params) => (dispatch) => {\n//   if (!params?.id) {\n//     console.error(\"Quiz ID is missing in params:\", params);\n//     return;\n//   }\n//   console.log(\"Fetching quiz for ID:\", params.id);\n//   dispatch(fetchQuizRequest());\n//   axios\n//     .get(`http://localhost:4000/quiz/${params.id}`)\n//     .then((res) => {\n//       console.log(\"Quiz Data Received:\", res.data);\n//       dispatch(fetchQuizSuccess(res.data));\n//     })\n//     .catch((err) => {\n//       console.error(\"Error fetching quiz:\", err.message);\n//       dispatch(fetchQuizFailure(err.message));\n//     });\n// };\n// //------------posting the user quiz result ------------  \n// //  -----------posting user result ------------  \n// export const postUserResult = (ans) => {  \n//   return {  \n//     type: types.SET_USER_RESULT_SUCCESS,  \n//     payload: ans,  \n//   };  \n// };  \n// // ------action creator function and axios function =-------  \n// const postUserResultRequest = (ans) => {  \n//   return {  \n//     type: types.POST_USER_RESULT_SUCCESS,  \n//     payload: ans,  \n//   };  \n// };  \n// const postUserResultSuccess = (ans) => {  \n//   return {  \n//     type: types.POST_USER_RESULT_SUCCESS,  \n//     payload: ans,  \n//   };  \n// };  \n// const postUserResultFailure = (ans) => {  \n//   return {  \n//     type: types.POST_USER_RESULT_SUCCESS,  \n//     payload: ans,  \n//   };  \n// };  \n// export const postQuizResult = (obj) => (dispatch) => {  \n//   const { quizId, userId, quizResult } = obj;  \n//   dispatch(postUserResultRequest());  \n//   axios  \n//     .post(`http://localhost:4000/userResult/${userId}`, obj)  \n//     .then((res) => {  \n//       dispatch(postUserResultSuccess(res.data));  \n//     })  \n//     .catch((err) => {  \n//       dispatch(postUserResultFailure(err));  \n//     });  \n// };  \nimport*as types from\"./actiontype.js\";import axios from\"axios\";import{API_BASE_URL}from\"./config.js\";// Create quiz in redux store\nexport const quizRequest=()=>{return{type:types.CREATE_QUIZ_REQUEST};};export const quizSuccess=quiz=>{return{type:types.CREATE_QUIZ_SUCCESS,payload:quiz};};export const quizFailure=error=>{return{type:types.CREATE_QUIZ_FAILURE,payload:error};};const getCurrentQuizRequest=payload=>{return{type:types.GET_CURRENT_QUIZ_REQUEST,payload};};const getCurrentQuizSuccess=payload=>{return{type:types.GET_CURRENT_QUIZ_SUCCESS,payload};};const getCurrentQuizFailure=payload=>{return{type:types.GET_CURRENT_QUIZ_FAILURE,payload};};const getCountSuccess=payload=>{return{type:types.GETCOUNTDATA,payload};};// Login user actions\nexport const loginUserName=payload=>{return{type:types.GETUSERNAME,payload};};export const loginUser=payload=>{return{type:types.GETUSERID,payload};};export const Logouthandleraction=payload=>{return{type:types.LOGOUTUSER,payload};};export const loginAdminId=payload=>{return{type:types.GETADMINID,payload};};export const loginAdminName=payload=>{return{type:types.GETADMINNAME,payload};};// Fetching quiz data\nconst fetchQuizRequest=payload=>{return{type:types.FETCH_QUIZ_REQUEST,payload};};const fetchQuizSuccess=payload=>{return{type:types.FETCH_QUIZ_SUCCESS,payload};};const fetchQuizFailure=payload=>{return{type:types.FETCH_QUIZ_FAILURE,payload};};export const fetchQuizDataFrombackend=()=>dispatch=>{axios.get(\"http://localhost:4000/api/quiz\").then(res=>dispatch(fetchQuizSuccess(res.data))).catch(err=>console.log(err));};export const getQuiz=params=>dispatch=>{if(!(params!==null&&params!==void 0&&params.id)){console.error(\"Quiz ID is missing in params:\",params);return;}console.log(\"Fetching quiz for ID:\",params.id);dispatch(fetchQuizRequest());axios.get(`http://localhost:4000/quiz/${params.id}`).then(res=>{console.log(\"Quiz Data Received:\",res.data);dispatch(fetchQuizSuccess(res.data));}).catch(err=>{console.error(\"Error fetching quiz:\",err.message);dispatch(fetchQuizFailure(err.message));});};// Posting user result\nexport const postUserResult=ans=>{return{type:types.SET_USER_RESULT_SUCCESS,payload:ans};};// Action creator functions for user result\nconst postUserResultRequest=ans=>{return{type:types.POST_USER_RESULT_SUCCESS,payload:ans};};const postUserResultSuccess=ans=>{return{type:types.POST_USER_RESULT_SUCCESS,payload:ans};};const postUserResultFailure=ans=>{return{type:types.POST_USER_RESULT_SUCCESS,payload:ans};};export const postQuizResult=obj=>dispatch=>{const{quizId,userId,quizResult}=obj;dispatch(postUserResultRequest());axios.post(`http://localhost:4000/userResult/${userId}`,obj).then(res=>{dispatch(postUserResultSuccess(res.data));}).catch(err=>{dispatch(postUserResultFailure(err));});};// Action creator functions for user data\nconst getAllUserDataRequest=payload=>{return{type:types.GET_ALL_USER_DATA_REQUEST,payload};};const getAllUserDataSuccess=payload=>{return{type:types.GET_ALL_USER_DATA_SUCCESS,payload};};const getAllUserDataFailure=payload=>{return{type:types.GET_ALL_USER_DATA_FAILURE,payload};};// Fetch all user data from backend\nexport const getAllUserDataFromBackend=()=>async dispatch=>{dispatch(getAllUserDataRequest());try{const res=await axios.get(\"http://localhost:4000/getuser\");dispatch(getAllUserDataSuccess(res.data));}catch(err){dispatch(getAllUserDataFailure(err));}};// Delete user by admin\nexport const deleteUserByAdmin=userId=>async dispatch=>{try{await axios.delete(`http://localhost:4000/user/${userId}`);dispatch(getAllUserDataFromBackend());}catch(error){console.error(\"Error deleting user:\",error.message);}};","map":{"version":3,"names":["types","axios","API_BASE_URL","quizRequest","type","CREATE_QUIZ_REQUEST","quizSuccess","quiz","CREATE_QUIZ_SUCCESS","payload","quizFailure","error","CREATE_QUIZ_FAILURE","getCurrentQuizRequest","GET_CURRENT_QUIZ_REQUEST","getCurrentQuizSuccess","GET_CURRENT_QUIZ_SUCCESS","getCurrentQuizFailure","GET_CURRENT_QUIZ_FAILURE","getCountSuccess","GETCOUNTDATA","loginUserName","GETUSERNAME","loginUser","GETUSERID","Logouthandleraction","LOGOUTUSER","loginAdminId","GETADMINID","loginAdminName","GETADMINNAME","fetchQuizRequest","FETCH_QUIZ_REQUEST","fetchQuizSuccess","FETCH_QUIZ_SUCCESS","fetchQuizFailure","FETCH_QUIZ_FAILURE","fetchQuizDataFrombackend","dispatch","get","then","res","data","catch","err","console","log","getQuiz","params","id","message","postUserResult","ans","SET_USER_RESULT_SUCCESS","postUserResultRequest","POST_USER_RESULT_SUCCESS","postUserResultSuccess","postUserResultFailure","postQuizResult","obj","quizId","userId","quizResult","post","getAllUserDataRequest","GET_ALL_USER_DATA_REQUEST","getAllUserDataSuccess","GET_ALL_USER_DATA_SUCCESS","getAllUserDataFailure","GET_ALL_USER_DATA_FAILURE","getAllUserDataFromBackend","deleteUserByAdmin","delete"],"sources":["C:/Users/RAGHAVENDRA/Downloads/MERN-Quiz-App-main/MERN-Quiz-App-main/Frontend_MERN_Quize_App/src/Redux/action.js"],"sourcesContent":["// import * as types from \"./actiontype.js\";  \n// import axios from \"axios\";  \n// import { API_BASE_URL } from \"./config.js\";  \n\n// // Create quiz in redux store  \n// export const quizRequest = () => {  \n//   return {  \n//     type: types.CREATE_QUIZ_REQUEST,  \n//   };  \n// };  \n\n// export const quizSuccess = (quiz) => {  \n//   return {  \n//     type: types.CREATE_QUIZ_SUCCESS,  \n//     payload: quiz,  \n//   };  \n// };  \n\n// export const quizFailure = (error) => {  \n//   return {  \n//     type: types.CREATE_QUIZ_FAILURE,  \n//     payload: error,  \n//   };  \n// };  \n\n// const getCurrentQuizRequest = (payload) => {  \n//   return {  \n//     type: types.GET_CURRENT_QUIZ_REQUEST,  \n//     payload,  \n//   };  \n// };  \n// const getCurrentQuizSuccess = (payload) => {  \n//   return {  \n//     type: types.GET_CURRENT_QUIZ_SUCCESS,  \n//     payload,  \n//   };  \n// };  \n// const getCurrentQuizFailure = (payload) => {  \n//   return {  \n//     type: types.GET_CURRENT_QUIZ_FAILURE,  \n//     payload,  \n//   };  \n// };  \n// const getCountSuccess = (payload) => {  \n//   return {  \n//     type: types.GETCOUNTDATA,  \n//     payload,  \n//   };  \n// };  \n\n// //---------- login user ----------  \n\n// export const loginUserName = (payload) => {  \n//   return {  \n//     type: types.GETUSERNAME,  \n//     payload,  \n//   };  \n// };  \n// export const loginUser = (payload) => {  \n//   return {  \n//     type: types.GETUSERID,  \n//     payload,  \n//   };  \n// };  \n\n// export const Logouthandleraction = (payload) => {  \n//   return {  \n//     type: types.LOGOUTUSER,  \n//     payload,  \n//   };  \n// };  \n\n// export const loginAdminId = (payload) => {  \n//   return {  \n//     type: types.GETADMINID,  \n//     payload,  \n//   };  \n// };  \n// export const loginAdminName = (payload) => {  \n//   return {  \n//     type: types.GETADMINNAME,  \n//     payload,  \n//   };  \n// };  \n\n// // ----------------------- action creator function for details of user for admin page ---------------  \n\n// const getAllUserDataRequest = (payload) => {  \n//   return {  \n//     type: types.GET_ALL_USER_DATA_REQUEST,  \n//     payload,  \n//   };  \n// };  \n\n// const getAllUserDataSuccess = (payload) => {  \n//   return {  \n//     type: types.GET_ALL_USER_DATA_SUCCESS,  \n//     payload,  \n//   };  \n// };  \n\n// const getAllUserDataFailure = (payload) => {  \n//   return {  \n//     type: types.GET_ALL_USER_DATA_FAILURE,  \n//     payload,  \n//   };  \n// };  \n\n// // ----------------------- details of user for admin page and delete user by admin ---------------  \n\n// export const getAllUserDataFromBackend = () => async (dispatch) => {  \n//   dispatch(getAllUserDataRequest());  \n//   try {  \n//     const res = await axios.get(\"http://localhost:4000/getuser\");  \n//     dispatch(getAllUserDataSuccess(res.data));  \n//   } catch (err) {  \n//     dispatch(getAllUserDataFailure());  \n//   }  \n// };  \n\n// export const deleteUserByAdmin = (userId) => async (dispatch) => {  \n//   try {  \n//     await axios.delete(`http://localhost:4000/user/${userId}`);  \n//     dispatch(getAllUserDataFromBackend());  \n//   } catch (error) {  \n//     console.error(\"Error deleting user:\", error.message);  \n//   }  \n// };  \n\n// // ----------post quiz--------------  \n\n// export const postQuizObj = (obj) => (dispatch) => {\n//   axios\n//     .post(\"http://localhost:4000/admin\", obj)\n//     .then((res) => {\n//       // Handle success if needed\n//     })\n//     .catch((err) => {\n//       console.error(\"Error posting quiz:\", err);\n//     });\n// };\n\n\n// // ----------------------------- fetching quiz data subject wise -------------  \n\n// const fetchQuizRequest = (payload) => {  \n//   return {  \n//     type: types.FETCH_QUIZ_REQUEST,  \n//     payload,  \n//   };  \n// };  \n// const fetchQuizSuccess = (payload) => {  \n//   return {  \n//     type: types.FETCH_QUIZ_SUCCESS,  \n//     payload,  \n//   };  \n// };  \n// const fetchQuizFailure = (payload) => {  \n//   return {  \n//     type: types.FETCH_QUIZ_FAILURE,  \n//     payload,  \n//   };  \n// };  \n// export const fetchQuizDataFrombackend = () => (dispatch) => {  \n//   axios  \n//     .get(\"http://localhost:4000/api/quiz\")  \n//     .then((res) => dispatch(fetchQuizSuccess(res.data)))  \n//     .catch((err) => console.log(err));  \n// };  \n\n// export const getQuiz = (params) => (dispatch) => {\n//   if (!params?.id) {\n//     console.error(\"Quiz ID is missing in params:\", params);\n//     return;\n//   }\n\n//   console.log(\"Fetching quiz for ID:\", params.id);\n//   dispatch(fetchQuizRequest());\n\n//   axios\n//     .get(`http://localhost:4000/quiz/${params.id}`)\n//     .then((res) => {\n//       console.log(\"Quiz Data Received:\", res.data);\n//       dispatch(fetchQuizSuccess(res.data));\n//     })\n//     .catch((err) => {\n//       console.error(\"Error fetching quiz:\", err.message);\n//       dispatch(fetchQuizFailure(err.message));\n//     });\n// };\n  \n\n// //------------posting the user quiz result ------------  \n\n// //  -----------posting user result ------------  \n\n// export const postUserResult = (ans) => {  \n//   return {  \n//     type: types.SET_USER_RESULT_SUCCESS,  \n//     payload: ans,  \n//   };  \n// };  \n\n// // ------action creator function and axios function =-------  \n\n// const postUserResultRequest = (ans) => {  \n//   return {  \n//     type: types.POST_USER_RESULT_SUCCESS,  \n//     payload: ans,  \n//   };  \n// };  \n// const postUserResultSuccess = (ans) => {  \n//   return {  \n//     type: types.POST_USER_RESULT_SUCCESS,  \n//     payload: ans,  \n//   };  \n// };  \n// const postUserResultFailure = (ans) => {  \n//   return {  \n//     type: types.POST_USER_RESULT_SUCCESS,  \n//     payload: ans,  \n//   };  \n// };  \n// export const postQuizResult = (obj) => (dispatch) => {  \n//   const { quizId, userId, quizResult } = obj;  \n//   dispatch(postUserResultRequest());  \n//   axios  \n//     .post(`http://localhost:4000/userResult/${userId}`, obj)  \n//     .then((res) => {  \n//       dispatch(postUserResultSuccess(res.data));  \n//     })  \n//     .catch((err) => {  \n//       dispatch(postUserResultFailure(err));  \n//     });  \n// };  \n\n\n\n\n\nimport * as types from \"./actiontype.js\";\nimport axios from \"axios\";\nimport { API_BASE_URL } from \"./config.js\";\n\n// Create quiz in redux store\nexport const quizRequest = () => {\n  return {\n    type: types.CREATE_QUIZ_REQUEST,\n  };\n};\n\nexport const quizSuccess = (quiz) => {\n  return {\n    type: types.CREATE_QUIZ_SUCCESS,\n    payload: quiz,\n  };\n};\n\nexport const quizFailure = (error) => {\n  return {\n    type: types.CREATE_QUIZ_FAILURE,\n    payload: error,\n  };\n};\n\nconst getCurrentQuizRequest = (payload) => {\n  return {\n    type: types.GET_CURRENT_QUIZ_REQUEST,\n    payload,\n  };\n};\nconst getCurrentQuizSuccess = (payload) => {\n  return {\n    type: types.GET_CURRENT_QUIZ_SUCCESS,\n    payload,\n  };\n};\nconst getCurrentQuizFailure = (payload) => {\n  return {\n    type: types.GET_CURRENT_QUIZ_FAILURE,\n    payload,\n  };\n};\nconst getCountSuccess = (payload) => {\n  return {\n    type: types.GETCOUNTDATA,\n    payload,\n  };\n};\n\n// Login user actions\nexport const loginUserName = (payload) => {\n  return {\n    type: types.GETUSERNAME,\n    payload,\n  };\n};\nexport const loginUser = (payload) => {\n  return {\n    type: types.GETUSERID,\n    payload,\n  };\n};\n\nexport const Logouthandleraction = (payload) => {\n  return {\n    type: types.LOGOUTUSER,\n    payload,\n  };\n};\n\nexport const loginAdminId = (payload) => {\n  return {\n    type: types.GETADMINID,\n    payload,\n  };\n};\nexport const loginAdminName = (payload) => {\n  return {\n    type: types.GETADMINNAME,\n    payload,\n  };\n};\n\n// Fetching quiz data\nconst fetchQuizRequest = (payload) => {\n  return {\n    type: types.FETCH_QUIZ_REQUEST,\n    payload,\n  };\n};\nconst fetchQuizSuccess = (payload) => {\n  return {\n    type: types.FETCH_QUIZ_SUCCESS,\n    payload,\n  };\n};\nconst fetchQuizFailure = (payload) => {\n  return {\n    type: types.FETCH_QUIZ_FAILURE,\n    payload,\n  };\n};\nexport const fetchQuizDataFrombackend = () => (dispatch) => {\n  axios\n    .get(\"http://localhost:4000/api/quiz\")\n    .then((res) => dispatch(fetchQuizSuccess(res.data)))\n    .catch((err) => console.log(err));\n};\n\nexport const getQuiz = (params) => (dispatch) => {\n  if (!params?.id) {\n    console.error(\"Quiz ID is missing in params:\", params);\n    return;\n  }\n\n  console.log(\"Fetching quiz for ID:\", params.id);\n  dispatch(fetchQuizRequest());\n\n  axios\n    .get(`http://localhost:4000/quiz/${params.id}`)\n    .then((res) => {\n      console.log(\"Quiz Data Received:\", res.data);\n      dispatch(fetchQuizSuccess(res.data));\n    })\n    .catch((err) => {\n      console.error(\"Error fetching quiz:\", err.message);\n      dispatch(fetchQuizFailure(err.message));\n    });\n};\n\n// Posting user result\nexport const postUserResult = (ans) => {\n  return {\n    type: types.SET_USER_RESULT_SUCCESS,\n    payload: ans,\n  };\n};\n\n// Action creator functions for user result\nconst postUserResultRequest = (ans) => {\n  return {\n    type: types.POST_USER_RESULT_SUCCESS,\n    payload: ans,\n  };\n};\nconst postUserResultSuccess = (ans) => {\n  return {\n    type: types.POST_USER_RESULT_SUCCESS,\n    payload: ans,\n  };\n};\nconst postUserResultFailure = (ans) => {\n  return {\n    type: types.POST_USER_RESULT_SUCCESS,\n    payload: ans,\n  };\n};\nexport const postQuizResult = (obj) => (dispatch) => {\n  const { quizId, userId, quizResult } = obj;\n  dispatch(postUserResultRequest());\n  axios\n    .post(`http://localhost:4000/userResult/${userId}`, obj)\n    .then((res) => {\n      dispatch(postUserResultSuccess(res.data));\n    })\n    .catch((err) => {\n      dispatch(postUserResultFailure(err));\n    });\n};\n\n// Action creator functions for user data\nconst getAllUserDataRequest = (payload) => {\n  return {\n    type: types.GET_ALL_USER_DATA_REQUEST,\n    payload,\n  };\n};\n\nconst getAllUserDataSuccess = (payload) => {\n  return {\n    type: types.GET_ALL_USER_DATA_SUCCESS,\n    payload,\n  };\n};\n\nconst getAllUserDataFailure = (payload) => {\n  return {\n    type: types.GET_ALL_USER_DATA_FAILURE,\n    payload,\n  };\n};\n\n// Fetch all user data from backend\nexport const getAllUserDataFromBackend = () => async (dispatch) => {\n  dispatch(getAllUserDataRequest());\n  try {\n    const res = await axios.get(\"http://localhost:4000/getuser\");\n    dispatch(getAllUserDataSuccess(res.data));\n  } catch (err) {\n    dispatch(getAllUserDataFailure(err));\n  }\n};\n\n// Delete user by admin\nexport const deleteUserByAdmin = (userId) => async (dispatch) => {\n  try {\n    await axios.delete(`http://localhost:4000/user/${userId}`);\n    dispatch(getAllUserDataFromBackend());\n  } catch (error) {\n    console.error(\"Error deleting user:\", error.message);\n  }\n};"],"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","ignoreList":[]},"metadata":{},"sourceType":"module"}