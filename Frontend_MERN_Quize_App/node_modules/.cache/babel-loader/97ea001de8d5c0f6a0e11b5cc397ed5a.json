{"ast":null,"code":"router.delete(\"/:id\", async (req, res) => {\n  var _req$headers$authoriz;\n  const token = (_req$headers$authoriz = req.headers.authorization) === null || _req$headers$authoriz === void 0 ? void 0 : _req$headers$authoriz.split(\" \")[1]; // Extract token from Authorization header\n\n  if (!token) {\n    return res.status(401).json({\n      message: \"Access denied. No token provided.\"\n    });\n  }\n  try {\n    // Verify the token\n    const decoded = jwt.verify(token, process.env.JWT_SECRET);\n\n    // Check if the user is an admin\n    if (decoded.role !== \"admin\") {\n      return res.status(403).json({\n        message: \"Access denied. Admins only.\"\n      });\n    }\n\n    // Delete the user\n    await User.deleteOne({\n      _id: req.params.id\n    });\n    res.status(200).json({\n      message: \"User deleted successfully\"\n    });\n  } catch (error) {\n    console.error(\"Error verifying token:\", error.message);\n    res.status(400).json({\n      message: \"Invalid token.\"\n    });\n  }\n});","map":{"version":3,"names":["router","delete","req","res","_req$headers$authoriz","token","headers","authorization","split","status","json","message","decoded","jwt","verify","process","env","JWT_SECRET","role","User","deleteOne","_id","params","id","error","console"],"sources":["C:/Users/RAGHAVENDRA/Downloads/MERN-Quiz-App-main/MERN-Quiz-App-main/Frontend_MERN_Quize_App/src/Components/auth/Login.jsx"],"sourcesContent":["router.delete(\"/:id\", async (req, res) => {\r\n  const token = req.headers.authorization?.split(\" \")[1]; // Extract token from Authorization header\r\n\r\n  if (!token) {\r\n    return res.status(401).json({ message: \"Access denied. No token provided.\" });\r\n  }\r\n\r\n  try {\r\n    // Verify the token\r\n    const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n\r\n    // Check if the user is an admin\r\n    if (decoded.role !== \"admin\") {\r\n      return res.status(403).json({ message: \"Access denied. Admins only.\" });\r\n    }\r\n\r\n    // Delete the user\r\n    await User.deleteOne({ _id: req.params.id });\r\n    res.status(200).json({ message: \"User deleted successfully\" });\r\n  } catch (error) {\r\n    console.error(\"Error verifying token:\", error.message);\r\n    res.status(400).json({ message: \"Invalid token.\" });\r\n  }\r\n});"],"mappings":"AAAAA,MAAM,CAACC,MAAM,CAAC,MAAM,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA,IAAAC,qBAAA;EACxC,MAAMC,KAAK,IAAAD,qBAAA,GAAGF,GAAG,CAACI,OAAO,CAACC,aAAa,cAAAH,qBAAA,uBAAzBA,qBAAA,CAA2BI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;EAExD,IAAI,CAACH,KAAK,EAAE;IACV,OAAOF,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAoC,CAAC,CAAC;EAC/E;EAEA,IAAI;IACF;IACA,MAAMC,OAAO,GAAGC,GAAG,CAACC,MAAM,CAACT,KAAK,EAAEU,OAAO,CAACC,GAAG,CAACC,UAAU,CAAC;;IAEzD;IACA,IAAIL,OAAO,CAACM,IAAI,KAAK,OAAO,EAAE;MAC5B,OAAOf,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAA8B,CAAC,CAAC;IACzE;;IAEA;IACA,MAAMQ,IAAI,CAACC,SAAS,CAAC;MAAEC,GAAG,EAAEnB,GAAG,CAACoB,MAAM,CAACC;IAAG,CAAC,CAAC;IAC5CpB,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAA4B,CAAC,CAAC;EAChE,CAAC,CAAC,OAAOa,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAACb,OAAO,CAAC;IACtDR,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAiB,CAAC,CAAC;EACrD;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}